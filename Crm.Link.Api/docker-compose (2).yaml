version: '3.3'

services:

  #rabbitmq:
  #  image: docker.io/rabbitmq:3.9-management
  #  container_name: rabbitmq
  #  restart: unless-stopped
  #  networks:
  #    - dockerNetwork
  #  ports:
  #    - '5672:5672'
  #    - '15672:15672'
      
  mysqldb:
    image: mysql/mysql-server:latest # user latest version of mysql-server image
    container_name: mysqldbcrm # add a name for the container
    restart: unless-stopped
    environment: # add default values, see docs for more info
      MYSQL_USER: dbadmin
      MYSQL_PASSWORD: dbpasswd
      MYSQL_ROOT_PASSWORD: mypassword
      MYSQL_ROOT_HOST: '%'
      MYSQL_DATABASE: suitecrm-db # create this database on startup
    networks:
      - dockerNetwork
    volumes:
      - 'suitecrm-db:/var/lib/mysql'
    ports:
      - '3306:3306'

  suitecrm:
    depends_on:
      - mysqldb
    image: docker.io/thaso/suitecrm:latest
    container_name: suitecrm
    restart: unless-stopped
    environment:
      APACHE_HTTP_PORT_NUMBER: '8080'
      APACHE_HTTPS_PORT_NUMBER: '443'
      SUITECRM_USERNAME: user
      SUITECRM_PASSWORD: bitnami
      SUITECRM_EMAIL: user@example.com
      SUITECRM_SKIP_BOOTSTRAP: 'no'
      SUITECRM_HOST: localhost
      SUITECRM_ENABLE_HTTPS: 'no'
      SUITECRM_EXTERNAL_HTTP_PORT_NUMBER: '80'
      SUITECRM_EXTERNAL_HTTPS_PORT_NUMBER: '443'
      SUITECRM_DATABASE_HOST: mysqldb # define the address/hostname of the mysql server eg mysql container name
      SUITECRM_DATABASE_PORT_NUMBER: '3306'
      SUITECRM_DATABASE_NAME: suitecrm-db
      SUITECRM_DATABASE_USER: root # this is the root user to login on startup
      SUITECRM_DATABASE_PASSWORD: mypassword
      ALLOW_EMPTY_PASSWORD: 'yes'
      #MYSQL_CLIENT_FLAVOR: mysql
      #MYSQL_CLIENT_DATABASE_HOST: mysqldb
      #MYSQL_CLIENT_DATABASE_PORT_NUMBER: '3306'
    networks:
      - dockerNetwork
    ports:
      - '80:8080'
      - '443:8443'

  crm-api:
    build:
        context: ../
        dockerfile: DockerFile
    image: docker.io/thaso/suitecrm-api:latest
    container_name: crm-api
    restart: unless-stopped
    networks:
      - dockerNetwork
      - rabbitmq
    ports:
      - '5172:80'

networks:
    dockerNetwork:
        name: dockerNetwork
        driver: bridge
    rabbitmq:
        name: rabbitmq
        driver: bridge

volumes: # add persistent data even if container is removed
    suitecrm-db:
        driver: local