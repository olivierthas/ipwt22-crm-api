version: '3.4'

services:

  #rabbitmq:
  #  hostname: 'rabbitmq'
  #  image: docker.io/rabbitmq:3.9-management
  #  container_name: rabbitmq
  #  restart: unless-stopped
  #  networks:
  #    - rabbitmq
  #  ports:
  #    - '5672:5672'
  #    - '15672:15672'
  #  volumes:
  #    #- rabbitmq_data:/var/lib/rabbitmq
  #    - rabbitmq_data:/var/lib/rabbitmq

  #db:
  #  image: mcr.microsoft.com/mssql/server:2019-latest
  #  hostname: db
  #  ports:
  #    - "1433:1433" # Publishes the port to docker host in order to access db from vscode extension. 
  #  environment:
  #    - SA_PASSWORD=y4jDDCDqmv2mAjQZ4WPKYiSL4g7nnh
  #    - ACCEPT_EULA=Y
  #  networks:
  #    - uuidmasterapi
  #  volumes:
  #    - db_data:/var/opt/mssql

  #api:
  #  depends_on:
  #    - db
  #  build:
  #    context: ./uuid
  #    dockerfile: Dockerfile
  #  ports: # replace by expose
  #    - "5000:5000"
  #  environment:
  #    - ASPNETCORE_ENVIRONMENT=Development
  #  networks:
  #    - uuidmasterapi

  suitecrm-db:
    image: mysql/mysql-server:latest # user latest version of mysql-server image
    container_name: suitecrm-db # add a name for the container
    restart: unless-stopped
    environment: # add default values, see docs for more info
      MYSQL_USER: admin
      MYSQL_PASSWORD: Student1
      MYSQL_ROOT_HOST: '%' # this variable '%' creates the 'root'@'localhost' account
      MYSQL_ROOT_PASSWORD: Student1
      MYSQL_DATABASE: suitecrm-db # create this database on startup
    networks:
      - suitecrmNetwork
    volumes:
      - 'suitecrm-db:/var/lib/mysql'
    ports:
      - '3306:3306'

  suitecrm:
    depends_on:
      - suitecrm-db
    image: docker.io/thaso/ipwt22-suitecrm:1.0
    container_name: suitecrm
    restart: unless-stopped
    environment:
      APACHE_HTTP_PORT_NUMBER: '8080'
      APACHE_HTTPS_PORT_NUMBER: '443'
      SUITECRM_USERNAME: suitecrm
      SUITECRM_PASSWORD: Student1
      SUITECRM_EMAIL: user@example.com
      SUITECRM_SKIP_BOOTSTRAP: 'no'
      SUITECRM_HOST: localhost
      SUITECRM_ENABLE_HTTPS: 'no'
      SUITECRM_EXTERNAL_HTTP_PORT_NUMBER: '80'
      SUITECRM_EXTERNAL_HTTPS_PORT_NUMBER: '443'
      SUITECRM_DATABASE_HOST: suitecrm-db # define the address/hostname of the mysql server eg mysql container name
      SUITECRM_DATABASE_PORT_NUMBER: '3306'
      SUITECRM_DATABASE_NAME: suitecrm-db
      SUITECRM_DATABASE_USER: root # this is the root user to login on startup
      SUITECRM_DATABASE_PASSWORD: Student1
      ALLOW_EMPTY_PASSWORD: 'yes'
      #MYSQL_CLIENT_FLAVOR: mysql
      #MYSQL_CLIENT_DATABASE_HOST: mysqldb
      #MYSQL_CLIENT_DATABASE_PORT_NUMBER: '3306'
    networks:
      - suitecrmNetwork
    ports:
      - '80:8080'
      - '443:8443'

  crm-api:
    depends_on:
      - rabbitmq
    build:
        context: ./crm
        dockerfile: Dockerfile
    # image: docker.io/thaso/suitecrm-api:latest
    container_name: crm-api
    restart: unless-stopped
    networks:
      - suitecrmNetwork
      - rabbitmq
      - uuidmasterapi
    ports:
      - '5172:80'
    volumes:
      - suitecrm-db:/crm_logs
    healthcheck:
        test: ["CMD", "curl", "-f", "http://crm-api/api/account/Test"]
        interval: 1m30s
        timeout: 10s
        retries: 3
        start_period: 40s

  #planning:    
  #  build:
  #      context: ./planning
  #      dockerfile: Dockerfile        
  #  container_name: planning-api
  #  restart: unless-stopped
  #  networks:
  #    - planning
  #    - rabbitmq
  #    - uuidmasterapi
  #  ports:
  #    - '6002:80'
  #    - '6003:443'

networks:
    suitecrmNetwork:
        name: suitecrmNetwork
        driver: bridge
    #crmNetwork:
    #    name: crmNetwork
    #    driver: bridge
    #frontend:
    #    name: frontend
    #    driver: bridge
    #planning:
    #    name: planning
    #    driver: bridge
    #rabbitmq:
    #    name: rabbitmq
    #    driver: bridge
    #uuidmasterapi:
    #    name: uuidmasterapi
    #    driver: bridge

volumes: 
    suitecrm-db:
        name: mysqldb
        driver: local
    crm-logs:
        driver: local
    rabbitmq_data:
        driver: local
    db_data: {}